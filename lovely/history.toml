[manifest]
version = "1.0"
dump_lua = true
priority = 5

[[patches]]
[patches.copy]
target = "globals.lua"
position = "append"
sources = [
  "src/Init.lua"
]

[[patches]]
[patches.copy]
target = "main.lua"
position = "append"
sources = [
  "src/RunHistory.lua",
  "src/RunStorage.lua",
  "src/Utils.lua"
]

[[patches]]
[patches.copy]
target = "functions/UI_definitions.lua"
position = "append"
sources = [
  "src/UI/BaseUI.lua",
  "src/UI/RunHistoryUI.lua",
  "src/UI/RunStorageUI.lua"
]

[[patches]]
[patches.copy]
target = "functions/button_callbacks.lua"
position = "append"
sources = [
  "src/UI/ButtonCallbacks.lua"
]

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "G.GAME.stake > 1 and {"
position = "before"
match_indent = true
overwrite = false
payload = "DV.HIST.history_tab(),"

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "G.FILE_HANDLER.force = false"
position = "before"
match_indent = true
overwrite = false
payload = "DV.HIST.queue_save_manager()"

# Below are extensions to engine/save_manager.lua;
# special considerations are needed, because the save manager runs on a thread.

[[patches]]
[patches.module]
source = "SaveManager.lua"
before = "src/engine/save_manager.lua"
name = "DV"
load_now = true

# TODO: `load_now` above is a stopgap solution to the lazy module loading introduced in Lovely v0.6.0
# My hunch is that lazy loading breaks something due to the fact that save manager runs on a thread.

[[patches]]
[patches.pattern]
target = "engine/save_manager.lua"
pattern = "compress_and_save(prefix_profile..'save.jkr', request.save_table)"
position = "after"
match_indent = true
overwrite = false
payload = '''
elseif request.type == 'store_run' then
  DV.HIST.execute_save_manager(request)
'''
